{
    "sourceFile": "lib/components/call_api.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1683634273907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1683636090025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n import 'package:dio/io.dart';\n import 'package:dio/dio.dart';\n import 'package:flutter/material.dart';\n import 'package:lango/Register/Get_Number.dart';\n-import 'package:taha/config/defines.dart';\n-import 'package:taha/utils/shared_preferenc/perf.dart';\n+import 'package:lango/config/defines.dart';\n+import 'package:lango/utils/shared_preferenc/perf.dart';\n \n enum RequestTypes { POST, GET, DEL, PUT, PATCH }\n \n Future sendRequest(\n"
                }
            ],
            "date": 1683634273907,
            "name": "Commit-0",
            "content": "import 'dart:convert';\nimport 'dart:developer';\nimport 'package:dio/io.dart';\nimport 'package:dio/dio.dart';\nimport 'package:flutter/material.dart';\nimport 'package:lango/Register/Get_Number.dart';\nimport 'package:taha/config/defines.dart';\nimport 'package:taha/utils/shared_preferenc/perf.dart';\n\nenum RequestTypes { POST, GET, DEL, PUT, PATCH }\n\nFuture sendRequest(\n  context,\n  RequestTypes type,\n  String url,\n  dynamic body, {\n  bool checkResponse = true,\n  Function? onError,\n  bool useBaseUrl = true,\n  customHeader,\n  Function(int? statusCode, String message)? onErrorCallback,\n  Function(\n    int? statusCode,\n    Map data,\n  )?\n      onSuccessCallback,\n  Function()? onNetworkError,\n  Function(int? statusCode, Map data)? onOtherStatusError,\n}) async {\n  String token = SimpleUserPreferences.getToken() ?? \"\";\n  Map<String, String> headers = customHeader ??\n      {\n        'Accept': 'application/json',\n        'Authorization': \"Bearer $token\",\n      };\n  print(\"token\");\n  print(token);\n  // print(url);\n  String url_request = useBaseUrl ? (Defines.baseUrl + url) : url;\n  var dio = Dio();\n\n  var options = Options(\n      followRedirects: false,\n      validateStatus: (status) {\n        return (status! < 600);\n      },\n      headers: headers);\n  try {\n    Response response;\n    switch (type) {\n      case RequestTypes.POST:\n        response = await dio.post(\n          url_request,\n          options: options,\n          data: body,\n        );\n        break;\n      case RequestTypes.GET:\n        response = await dio.get(\n          url_request,\n          options: options,\n          queryParameters: body,\n        );\n        break;\n      case RequestTypes.DEL:\n        response = await dio.delete(url_request, options: options, data: body);\n        break;\n      case RequestTypes.PUT:\n        response = await dio.put(\n          url_request,\n          options: options,\n          data: body,\n        );\n        break;\n      case RequestTypes.PATCH:\n        response = await dio.patch(\n          url_request,\n          options: options,\n          data: body,\n        );\n        break;\n    }\n    print('uri_request : ' + url_request);\n    // print();\n    try {\n      body = body.toJson();\n    } catch (e) {}\n    log('body : ' + json.encode(body));\n    print('statusCode : ' + response.statusCode.toString());\n    String message = '';\n    try {\n      log('response1 : ' + json.encode(response.data));\n      // message = response.data['message'];\n    } catch (e) {\n      log('response : ' + response.data.toString());\n    }\n    if (response.statusCode == 401) {\n      // SharedPreferences prefs = await SharedPreferences.getInstance();\n      // await prefs.clear();\n      showErrorToken(context);\n      sendRequest(\n        context,\n        RequestTypes.POST,\n        Defines.refresh,\n        {\"\": \"\"},\n        onSuccessCallback: (statusCode, data) {\n          SimpleUserPreferences.setToken(data['token']);\n        },\n        onErrorCallback: (statusCode, message) => Navigator.pushReplacement(\n            context,\n            MaterialPageRoute(\n              builder: (context) => GetnumberScreen(),\n            )),\n        onNetworkError: () => Navigator.pushReplacement(\n            context,\n            MaterialPageRoute(\n              builder: (context) => GetnumberScreen(),\n            )),\n        onOtherStatusError: (statusCode, data) => Navigator.pushReplacement(\n            context,\n            MaterialPageRoute(\n              builder: (context) => GetnumberScreen(),\n            )),\n      );\n\n      return onErrorCallback!(response.statusCode, message);\n    } else {\n      if (response.requestOptions.data is FormData) {\n        // debugPrint((response.requestOptions.data as FormData).fields.toString());\n      } else {\n        // print(response.requestOptions.data.toString());\n      }\n      // print(response.requestOptions.uri.toString());\n      // print(response.toString());\n      if (checkResponse) {\n        if ((response.statusCode! / 100).round() == 2) {\n          return onSuccessCallback!(response.statusCode, response.data);\n        } else {\n          if (onError != null) {\n            return onError();\n          }\n\n          onOtherStatusError!(response.statusCode, response.data);\n          // ScaffoldMessenger.of(NavigationService.navigatorKey.currentContext!,).showSnackBar(\n          //     SnackBar(\n          //       content:AutoSizeText(message, textAlign: TextAlign.center),\n          //       backgroundColor: Theme.of(NavigationService.navigatorKey.currentContext!).errorColor,\n          //     ),\n          //   );\n        }\n      } else {\n        // function(response);\n      }\n    }\n  } catch (error) {\n    if (onError != null) {\n      onError();\n    }\n    print('error_try_request= ' + error.toString());\n    // return onOtherStatusErrorGlobal();\n  }\n}\n\n// void showErrorNetwork(context) {\n//   // showToastWidget(\n//   //     Container(\n//   //       child: ToastWidget(\n//   //         hasDescription: true,\n//   //         toastLeftElems: ToastLeftElems.none,\n//   //         toastActions: ToastActions.none,\n//   //         autoResize: true,\n//   //         hasRightIcon: false,\n//   //         description: 'please check network',\n//   //         title: 'Error',\n//   //         height: 200,\n//   //         backColor: Colors.red.shade300,\n//   //       ),\n//   //     ),\n//   //     context: context,\n//   //     alignment: Alignment.topCenter,\n//   //     duration: Duration(seconds: 7));\n// }\n\nvoid showErrorToken(context) {\n  // showToastWidget(\n  //     Container(\n  //       child: ToastWidget(\n  //         hasDescription: true,\n  //         toastLeftElems: ToastLeftElems.none,\n  //         toastActions: ToastActions.none,\n  //         autoResize: true,\n  //         hasRightIcon: false,\n  //         description: 'token expired',\n  //         title: 'Error',\n  //         height: 200,\n  //         backColor: Colors.red.shade300,\n  //       ),\n  //     ),\n  //     context: context,\n  //     alignment: Alignment.topCenter,\n  //     duration: Duration(seconds: 7));\n}\n\nvoid showSuccesMessage(context, description) {\n  // showToastWidget(\n  //     Container(\n  //       child: ToastWidget(\n  //         hasDescription: true,\n  //         toastLeftElems: ToastLeftElems.none,\n  //         toastActions: ToastActions.none,\n  //         autoResize: true,\n  //         hasRightIcon: false,\n  //         description: description,\n  //         title: 'Success',\n  //         height: 200,\n  //         backColor: Colors.green.shade300,\n  //       ),\n  //     ),\n  //     context: context,\n  //     alignment: Alignment.topCenter,\n  //     duration: Duration(seconds: 7));\n}\n\nvoid showErrorMessage(\n  context,\n  description,\n) {\n  // showToastWidget(\n  //     Container(\n  //       child: ToastWidget(\n  //         hasDescription: true,\n  //         toastLeftElems: ToastLeftElems.none,\n  //         toastActions: ToastActions.none,\n  //         autoResize: true,\n  //         hasRightIcon: false,\n  //         description: description,\n  //         title: 'Error',\n  //         height: 200,\n  //         backColor: Colors.red.shade300,\n  //       ),\n  //     ),\n  //     context: context,\n  //     alignment: Alignment.topCenter,\n  //     duration: Duration(seconds: 7));\n}\n\nvoid showErrorMessageRotated(\n  context,\n  description,\n) {\n  // showToastWidget(\n  //     RotatedBox(\n  //         quarterTurns: -3,\n  //         child: Container(\n  //           child: ToastWidget(\n  //             hasDescription: true,\n  //             toastLeftElems: ToastLeftElems.none,\n  //             toastActions: ToastActions.none,\n  //             autoResize: true,\n  //             hasRightIcon: false,\n  //             description: description,\n  //             title: 'Error',\n  //             height: 200,\n  //             backColor: Colors.red.shade300,\n  //           ),\n  //         )),\n  //     context: context,\n  //     alignment: Alignment.topCenter,\n  //     duration: Duration(seconds: 7));\n}\n"
        }
    ]
}