{
    "sourceFile": "lib/Chats/Private_chat/Private_Chat.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1683634273278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1683636090016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n                     color: Color(0xFFffffff),\n                     width: getHorizontalSize(\n                       1,\n                     ),\n-                    strokeAlign: StrokeAlign.outside,\n+                    // strokeAlign: StrokeAlign.outside,\n                   ),\n                 ).copyWith(\n                   borderRadius: BorderRadius.circular(\n                     getHorizontalSize(\n"
                }
            ],
            "date": 1683634273278,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:file_picker/file_picker.dart';\nimport 'package:flutter_svg/flutter_svg.dart';\nimport 'package:lango/Chats/Private_chat/models/private_chat_model.dart';\n\nclass PrivateChatScreen extends StatelessWidget {\n  GlobalKey<NavigatorState> navigatorKey = GlobalKey();\n\n  Size size = WidgetsBinding.instance.window.physicalSize /\n      WidgetsBinding.instance.window.devicePixelRatio;\n\n  double getHorizontalSize(double px) {\n    return ((px * size.width) / 390);\n  }\n\n  get height {\n    num statusBar = MediaQueryData.fromWindow(WidgetsBinding.instance.window)\n        .viewPadding\n        .top;\n    num bottomBar = MediaQueryData.fromWindow(WidgetsBinding.instance.window)\n        .viewPadding\n        .bottom;\n    num screenHeight = size.height - statusBar - bottomBar;\n    return screenHeight;\n  }\n\n  double getVerticalSize(double px) {\n    return ((px * height) / 844);\n  }\n\n  double getSize(double px) {\n    var height = getVerticalSize(px);\n    var width = getHorizontalSize(px);\n    if (height < width) {\n      return height.toInt().toDouble();\n    } else {\n      return width.toInt().toDouble();\n    }\n  }\n\n  Widget buildChatMessages(PrivateChatModel model) {\n    if (model.isSender == true) {\n      return Column(\n        crossAxisAlignment: CrossAxisAlignment.end,\n        children: [\n          Container(\n            constraints: const BoxConstraints(\n              maxWidth: 400,\n            ),\n            margin: EdgeInsets.only(left: 100, right: 44, top: 20),\n            padding: EdgeInsets.only(left: 14, top: 16, bottom: 16, right: 20),\n            decoration: BoxDecoration(color: Color(0xFF3657ff), boxShadow: [\n              BoxShadow(\n                color: Colors.grey,\n                offset: const Offset(5.0, 5.0),\n                blurRadius: 10,\n                spreadRadius: 2,\n              ),\n            ]).copyWith(\n              borderRadius: BorderRadius.only(\n                topLeft: Radius.circular(\n                  getHorizontalSize(\n                    16,\n                  ),\n                ),\n                topRight: Radius.circular(\n                  getHorizontalSize(\n                    6,\n                  ),\n                ),\n                bottomLeft: Radius.circular(\n                  getHorizontalSize(\n                    16,\n                  ),\n                ),\n                bottomRight: Radius.circular(\n                  getHorizontalSize(\n                    16,\n                  ),\n                ),\n              ),\n            ),\n            child: Text(\n              model.msg,\n              maxLines: null,\n              textAlign: TextAlign.left,\n              style: TextStyle(\n                color: Color(0xFFffffff),\n                fontSize: getSize(14),\n                fontFamily: 'Product Sans Medium',\n                fontWeight: FontWeight.w500,\n              ),\n            ),\n          ),\n        ],\n      );\n    } else if (model.type == \"Message\") {\n      return Padding(\n        padding: EdgeInsets.only(\n          left: 12,\n          top: 24,\n          right: 60,\n        ),\n        child: Row(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Card(\n              clipBehavior: Clip.antiAlias,\n              elevation: 0,\n              color: Color(0xFFffffff),\n              shape: RoundedRectangleBorder(\n                side: BorderSide(\n                  color: Color(0xFFffffff),\n                  width: getHorizontalSize(\n                    1,\n                  ),\n                ),\n                borderRadius: BorderRadius.circular(\n                  getHorizontalSize(\n                    16,\n                  ),\n                ),\n              ),\n              child: Container(\n                height: getSize(\n                  32,\n                ),\n                width: getSize(\n                  32,\n                ),\n                decoration: BoxDecoration(\n                  color: Color(0xFFffffff),\n                  border: Border.all(\n                    color: Color(0xFFffffff),\n                    width: getHorizontalSize(\n                      1,\n                    ),\n                    strokeAlign: StrokeAlign.outside,\n                  ),\n                ).copyWith(\n                  borderRadius: BorderRadius.circular(\n                    getHorizontalSize(\n                      16,\n                    ),\n                  ),\n                ),\n                child: Stack(\n                  children: [\n                    Align(\n                      alignment: Alignment.center,\n                      child: Padding(\n                        padding: EdgeInsets.zero,\n                        child: ClipRRect(\n                          borderRadius: BorderRadius.circular(\n                            getHorizontalSize(\n                              16,\n                            ),\n                          ),\n                          child: Container(\n                            height: height,\n                            width: size.width,\n                            child: SvgPicture.asset(\n                              'assets/images/img_user.svg',\n                            ),\n                          ),\n                        ),\n                      ),\n                    )\n                  ],\n                ),\n              ),\n            ),\n            Expanded(\n              child: Container(\n                margin: EdgeInsets.only(\n                  left: 16,\n                ),\n                decoration: BoxDecoration(\n                  borderRadius: BorderRadius.only(\n                    topLeft: Radius.circular(\n                      getHorizontalSize(\n                        6,\n                      ),\n                    ),\n                    topRight: Radius.circular(\n                      getHorizontalSize(\n                        16,\n                      ),\n                    ),\n                    bottomLeft: Radius.circular(\n                      getHorizontalSize(\n                        16,\n                      ),\n                    ),\n                    bottomRight: Radius.circular(\n                      getHorizontalSize(\n                        16,\n                      ),\n                    ),\n                  ),\n                ),\n                child: Align(\n                  alignment: Alignment.centerLeft,\n                  child: Container(\n                    constraints: const BoxConstraints(\n                      maxWidth: 400,\n                    ),\n                    padding: EdgeInsets.only(\n                      left: 24,\n                      top: 16,\n                      bottom: 16,\n                    ),\n                    decoration: BoxDecoration(color: Colors.white, boxShadow: [\n                      BoxShadow(\n                        color: Colors.grey,\n                        offset: const Offset(5.0, 5.0),\n                        blurRadius: 10,\n                        spreadRadius: 2,\n                      ),\n                    ]).copyWith(\n                      borderRadius: BorderRadius.only(\n                        topLeft: Radius.circular(\n                          getHorizontalSize(\n                            6,\n                          ),\n                        ),\n                        topRight: Radius.circular(\n                          getHorizontalSize(\n                            16,\n                          ),\n                        ),\n                        bottomLeft: Radius.circular(\n                          getHorizontalSize(\n                            16,\n                          ),\n                        ),\n                        bottomRight: Radius.circular(\n                          getHorizontalSize(\n                            16,\n                          ),\n                        ),\n                      ),\n                    ),\n                    child: Container(\n                      constraints: const BoxConstraints(\n                        maxWidth: 400,\n                      ),\n                      margin: EdgeInsets.only(\n                        top: 2,\n                        right: 22,\n                      ),\n                      child: Text(\n                        model.msg,\n                        maxLines: null,\n                        textAlign: TextAlign.left,\n                        style: TextStyle(\n                          color: Color(0xFF141416),\n                          fontSize: getSize(14),\n                          fontFamily: 'Product Sans Medium',\n                          fontWeight: FontWeight.w500,\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ],\n        ),\n      );\n    } else if (model.type == \"Media\") {\n      return Container();\n    } else {\n      return SizedBox();\n    }\n  }\n\n  List<PrivateChatModel> getUserChats() {\n    List<PrivateChatModel> mList = [];\n    PrivateChatModel model1 = PrivateChatModel();\n    model1.msg =\n        \"Minim dolor amet nulla laboris enim dolore consequat. Minim dolo...\";\n    model1.duration = \"7.30 PM\";\n    model1.type = \"Message\";\n    model1.isSender = true;\n\n    PrivateChatModel model2 = PrivateChatModel();\n    model2.msg =\n        \"Minim dolor amet nulla laboris enim dolore consequat. Minim dolo...\";\n    model2.type = \"Message\";\n    model2.duration = \"7.30 PM\";\n\n    PrivateChatModel model3 = PrivateChatModel();\n    model3.msg = \"Minim\";\n    model3.type = \"Message\";\n    model3.duration = \"7.30 PM\";\n\n    mList.add(model1);\n    mList.add(model2);\n    mList.add(model3);\n\n    return mList;\n  }\n\n  String mytext = \"\";\n\n  final fieldText = TextEditingController();\n\n  void clearText() {\n    fieldText.clear();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n          child: Stack(\n        fit: StackFit.expand,\n        children: [\n          Align(\n            alignment: Alignment.bottomCenter,\n            child: SingleChildScrollView(\n              padding: EdgeInsets.only(bottom: 100),\n              child: ListView.builder(\n                itemBuilder: (context, i) =>\n                    buildChatMessages(getUserChats()[i]),\n                itemCount: getUserChats().length,\n                physics: NeverScrollableScrollPhysics(),\n                shrinkWrap: true,\n              ),\n            ),\n          ),\n          Positioned(\n            bottom: 0,\n            child: Container(\n              width: size.width,\n              margin: EdgeInsets.only(\n                top: 32,\n              ),\n              padding: EdgeInsets.all(16),\n              decoration: BoxDecoration(color: Colors.white, boxShadow: [\n                BoxShadow(\n                  color: Colors.grey,\n                  offset: const Offset(5.0, 5.0),\n                  blurRadius: 10,\n                  spreadRadius: 2,\n                ),\n              ]).copyWith(\n                borderRadius: BorderRadius.only(\n                  topLeft: Radius.circular(\n                    getHorizontalSize(\n                      8,\n                    ),\n                  ),\n                  topRight: Radius.circular(\n                    getHorizontalSize(\n                      8,\n                    ),\n                  ),\n                ),\n              ),\n              child: Container(\n                padding: EdgeInsets.only(\n                  right: 12,\n                  left: 12,\n                ),\n                decoration: BoxDecoration(\n                  color: Color(0xFFf4f5f6),\n                ).copyWith(\n                  borderRadius: BorderRadius.circular(\n                    getHorizontalSize(\n                      9,\n                    ),\n                  ),\n                ),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.start,\n                  children: [\n                    Expanded(\n                      child: Padding(\n                        padding: EdgeInsets.only(\n                          left: 12,\n                          top: 5,\n                          bottom: 1,\n                          right: 20,\n                        ),\n                        child: TextField(\n                          onChanged: (text) {\n                            mytext = text;\n                          },\n                          decoration: InputDecoration(\n                            hintText: \"Reply comment\",\n                            border: InputBorder.none,\n                          ),\n                          controller: fieldText,\n                        ),\n                      ),\n                    ),\n                    IconButton(\n                      onPressed: _pickFile,\n                      icon: SvgPicture.asset(\n                          'assets/images/img_trash_gray_200.svg'),\n                    ),\n                    IconButton(\n                        onPressed: () {\n                          clearText();\n                        },\n                        icon: SvgPicture.asset(\n                            'assets/images/img_arrowup_white_a700.svg')),\n                  ],\n                ),\n              ),\n            ),\n          )\n        ],\n      )),\n    );\n  }\n}\n\nvoid _pickFile() async {\n  FilePickerResult? result = await FilePicker.platform.pickFiles();\n}\n"
        }
    ]
}